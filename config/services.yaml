# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    env(APP_NAME): 'Memory'
    assets_directory: '%kernel.project_dir%/assets'
    public_directory: '%kernel.project_dir%/public'
    upload_directory: '%kernel.project_dir%/public/uploads'
    app.notifications.email_sender: no-reply@memory.ru
    app.notifications.email_sender_name: 'memory.ru'
    app_locales: ru
    app_countries: ru
    app_url : '%env(APP_URL)%'
    autoload_paths:
        - 'config/bootstrap.php'
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
          # fetching services directly from the container via $container->get() won't work.
        # The best practice is to be explicit about your dependencies anyway.

        bind:               # defines the scalar arguments once and apply them to any service defined/created in this file
            $locales: '%app_locales%'
            $countries: '%app_countries%'
            $defaultLocale: '%app_locales%'
            $apiUserRole: 'ROLE_API_USER'
            $exportFileFormat: 'Xls'
            $exportFileFormatConfirm: 'Csv'
            $importFileFormat: 'Xls'
            $newOrderWaitingTime: 5
            $emailSender: '%app.notifications.email_sender%'
            $emailSenderName: '%app.notifications.email_sender_name%'
            $appName: '%env(APP_NAME)%'

    #    fos_user
    #    from_email
    #    address
    #    sender_name

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    #    App\EventSubscriber\TimestamperSubscriber:
    #        tags:
    #            - { name: doctrine.event_subscriber, connection: default }

    App\Handler\DataTables\:
        resource: '../src/Handler/DataTables'
        autowire: true
        public: false
        tags: [ datatable ]

    FOS\UserBundle\Util\UserManipulator:
        tags: ['fos_user.util.user_manipulator']

    App\Service\MenuBuilder:
        arguments: ["@knp_menu.factory"]
        tags:
            - { name: knp_menu.menu_builder, method: createMainMenu, alias: mainnav }
            - { name: knp_menu.menu_builder, method: createSidebarMenu, alias: sidebarnav }
            - { name: knp_menu.menu_builder, method: createFrontendMainMenu, alias: frontend_main }

    App\Mailer\FOSUserMailer:
        arguments:
            $mailer: '@mailer.mailer'
            $twig: '@twig'
            $fromEmail: '%app.notifications.email_sender%'
        tags:
            - { name: 'fos_user.mailer' }

#    App\Describer\HiddenMethodDescriber:
#        arguments:
#            $routeCollection: '@router.route_collection'
#            $annotationReader: '@annotation_reader'
#        tags:
#            - { name: 'nelmio_api_doc.describer', priority: 50 }

#    # Register Event listener as "Doctrine Entity Listeners"
#    App\EventListener\OrderStatusChanger:
#        tags:
#            -   # these are the options for pre update
#                name: 'doctrine.orm.entity_listener'
#                event: 'preUpdate'
#                entity: 'App\Entity\Order'
#
#                # set the 'lazy' option to TRUE to only instantiate listeners when they are used
#                lazy: true
#
#                # by default, Symfony looks for a method called after the event (e.g. postUpdate())
#                # if it doesn't exist, it tries to execute the '__invoke()' method, but you can
#                # configure a custom method name with the 'method' option
#                method: 'preUpdate'
#
#            - # these are the options for pre persist
#                name: 'doctrine.orm.entity_listener'
#                event: 'prePersist'
#                entity: 'App\Entity\Order'
#
#                # set the 'lazy' option to TRUE to only instantiate listeners when they are used
#                lazy: true
#
#                # by default, Symfony looks for a method called after the event (e.g. postUpdate())
#                # if it doesn't exist, it tries to execute the '__invoke()' method, but you can
#                # configure a custom method name with the 'method' option
#                method: 'prePersist'
